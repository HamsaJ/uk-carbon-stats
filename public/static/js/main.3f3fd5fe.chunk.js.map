{"version":3,"sources":["components/RegionData.js","components/ColourCodes.js","components/CarbonData.js","App.js","serviceWorker.js","index.js","logo.jpg"],"names":["Region","region","shortname","regionid","dnoregion","intensity","className","classNames","index","ColourCodes","override","css","CARBON_DATA_QUERY","gql","CarbonData","props","state","loading","Fragment","query","error","data","size","console","log","RegionalCarbonData","map","regions","Component","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","src","logo","alt","style","width","display","margin","borderRadius","padding","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"kTAIaA,G,OAAS,SAAC,GAEhB,IAAD,IADFC,OAA+BC,GAC7B,EADQC,SACR,EADkBC,UAClB,EAD6BF,WAAWG,EACxC,EADwCA,UAE1C,OACI,yBAAKC,UAAU,uBACf,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,uCAAaJ,GACX,+CAAqB,IACnB,0BAAMI,UAAWC,IAAW,CACxB,eAAoC,QAApBF,EAAUG,OAAuC,aAApBH,EAAUG,MACvD,eAAoC,aAApBH,EAAUG,MAC1B,cAAmC,SAApBH,EAAUG,OAAwC,cAApBH,EAAUG,SAE1DH,EAAUG,SAIjB,yBAAKF,UAAU,YACX,4BAAQA,UAAU,qBAAlB,gB,QCrBDG,EAAc,WACvB,OACI,yBAAKH,UAAU,QACX,2BACI,0BAAMA,UAAU,yBADpB,UAGA,2BACI,0BAAMA,UAAU,yBADpB,eAGA,2BACI,0BAAMA,UAAU,wBADpB,a,wgBCDZ,IAAMI,EAAWC,cAAH,KAMRC,EAAoBC,YAAH,KAwBVC,EAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACXC,SAAS,GAHI,EADvB,qDAQc,IAAD,OACL,OACI,kBAAC,IAAMC,SAAP,KACI,wBAAIZ,UAAU,kBAAd,4BAEA,kBAAC,EAAD,MACA,kBAAC,QAAD,CAAOa,MAAOP,IAEN,YAA+B,IAA5BK,EAA2B,EAA3BA,QAASG,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACf,OAAIJ,EACA,yBAAKX,UAAU,iBACb,kBAAC,IAAD,CACEK,IAAKD,EACLY,KAAM,IAENL,QAAS,EAAKD,MAAMC,YAIxBG,GAAOG,QAAQC,IAAIJ,GAChB,kBAAC,IAAMF,SAAP,KAECG,EAAKI,mBAAmBJ,KAAKK,KAAI,SAAAL,GAAI,OACjCA,EAAKM,QAAQD,KAAI,SAAAzB,GAAM,OACnB,kBAAC,EAAD,CAAQA,OAAQA,oBAhC5D,GAAgC2B,a,kECjC1BC,EAAS,IAAIC,IAAa,CAC9BC,IAAM,WACNC,MAAO,IAAIC,MAkBEC,MAff,WACE,OACE,kBAACC,EAAA,EAAD,CAAgBN,OAAQA,GACpB,kBAAC,IAAD,KACE,yBAAKvB,UAAU,aACf,yBAAK8B,IAAKC,IACVC,IAAI,SACJC,MAAO,CAAEC,MAAM,IAAKC,QAAS,QAASC,OAAQ,OAAQC,aAAc,IAAKC,QAAS,MAClF,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,QCRvBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLG,QAAQH,MAAMA,EAAM6C,a,mBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.3f3fd5fe.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\n\nexport const Region = ({\n    region: { regionid, dnoregion, shortname, intensity }\n}) => {\n    return (\n        <div className=\"card card-body mb-3\">\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <h4>Region: {shortname}</h4>\n              <h4>Intensity index:{' '} \n                <span className={classNames({\n                    'text-success': intensity.index === 'low' || intensity.index === 'very low',\n                    'text-primary': intensity.index === 'moderate',\n                    'text-danger': intensity.index === 'high' || intensity.index === 'very high'\n                })}>\n                {intensity.index} \n                </span>\n            </h4>\n          </div>\n          <div className=\"col-md-3\">\n              <button className=\"btn btn-secondary\">Details</button>\n          </div>\n        </div>\n      </div>\n    )\n}","import React from 'react';\n\nexport const ColourCodes = () => {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /> = Low\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-primary\" /> = Moderate\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" /> = High\n            </p>\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport {  gql } from '@apollo/client';\nimport { Query } from '@apollo/react-components';\nimport { Region } from './RegionData';\n\nimport { css } from \"@emotion/core\";\nimport { ColourCodes } from './ColourCodes';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\n// Can be a string as well. Need to ensure each key-value pair ends with ;\nconst override = css`\n  display: block;\n  margin: 0 auto;\n`;\n\n\nconst CARBON_DATA_QUERY = gql`\nquery {\n    RegionalCarbonData {\n      data {\n        to\n        from\n        regions {\n          regionid\n          dnoregion\n          shortname\n          intensity {\n            index\n          }\n          generationmix {\n            fuel\n            perc\n          }\n        }\n      }\n    }\n  }\n  \n`\n\nexport class CarbonData extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          loading: true\n        };\n      }\n\n    render() {\n        return (\n            <React.Fragment>\n                <h2 className=\"display-4 my-3\">UK Carbon Data for today</h2>\n                \n                <ColourCodes/>\n                <Query query={CARBON_DATA_QUERY}>\n                    {\n                        ({ loading, error, data }) => {\n                            if (loading) return (\n                                <div className=\"sweet-loading\">\n                                  <ClipLoader\n                                    css={override}\n                                    size={150}\n                                    // color={\"#123abc\"}\n                                    loading={this.state.loading}\n                                  />\n                                </div>\n                              );\n                            if (error) console.log(error);\n                            return <React.Fragment>\n                                {\n                                    data.RegionalCarbonData.data.map(data => (\n                                        data.regions.map(region => (\n                                            <Region region={region}/>\n                                        ))\n                                    ))\n                                     \n                                }\n                            </React.Fragment>\n                        }\n                    }\n                </Query>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default CarbonData","import React, { Component } from 'react';\nimport { CarbonData } from \"./components/CarbonData\";\nimport { ApolloClient, ApolloProvider, InMemoryCache }  from '@apollo/client';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport logo from './logo.jpg';\n\nconst client = new ApolloClient({\n  uri : '/graphql',\n  cache: new InMemoryCache()\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n          <img src={logo} \n          alt=\"carbon\" \n          style={{ width:300, display: 'block', margin: 'auto', borderRadius: 200, padding: 20}}></img>\n          <Route exact path=\"/\" component={CarbonData} />\n          </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.0906859a.jpg\";"],"sourceRoot":""}